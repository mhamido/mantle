module NestedComments with

/*
/* Calculates n! using the recurrence:
 * 0! = 1
 * n! = (n - 1)! * n!
 */
fun factorial (n: Int): Int =
    if n <= 1 then 1 /* Note: Handles negatives as well */
    else recFactorial(n - 1) * n
*/

/* Better factorial function */
fun factorial (n: Int): Int =
    /* At this point I'm just putting comments everywhere to make 
        sure it /* works */ properly */
    let fun loop (n: Int) (acc: Int): Int =
            if n <= /* suddenly, comment */ 1 then acc
            else loop (n - 1) (acc /* *= n */ * n)
    in loop n 1

fun main () = 
    for i <- 0 to 15 do
        /* Imperative constructs are pretty useful in these scenarios. */
        let val () = println "==<>=="
            val () = println i
            /* ...or not. I've wanted to add a 'block' syntax like Scala/Haskell's `{;}`
                But that might clash with anonymous record syntax that I want.
             */
            val () = println (recFactorial i)
            val () = println (iterFactorial i)
        in  println "==<>=="

/* And now, we're done */