module Iterators with

data Maybe 'a = None | Some 'a
data List 'a = Nil | Cons 'a (List 'a)
data ArrayIterator 'a = MkArrayIterator Int (Array 'a)

data Iterator 'i 'a = MkIterator ('i -> Maybe ('a, 'i))

fun unfoldList ['a] (xs: List 'a): Maybe ('a, List 'a) =
    case xs of {
        []      => [];
        x :: xs => Some (x, xs)
    }

fun unfoldArray ['a] (i: Int) (xs: Array 'a): Maybe ('a, Array 'a) =
    case xs of {
        
    }

fun listIterator['a](xs: List 'a): Iterator (List 'a) = MkIterator []