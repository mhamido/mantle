module Exp with

fun mod (m: Int) (n: Int): Int = m - n * (m / n)

fun gcd (m: Int) (n: Int): Int =
    if n = 0 then m
    else gcd n (mod m n)

fun pow1 (a: Int) (n: Int): Int =
    if n == 0 then 1
    else a * pow1 a (n - 1)

fun pow2 (a: Int) (n: Int): Int =
    if n == 0 then 1
    else if rem n 2 == 0 then 
        let val x = pow2 a (n / 2) in x * x
    else 
        let val x = pow2 a ((n - 1) / 2) in a * x * x

fun log (b: Int) (n: Int): Int =
    if n == 1 then 0
    else 1 + log b (n / b)

fun log2 (a: Int): Int = log 2 a